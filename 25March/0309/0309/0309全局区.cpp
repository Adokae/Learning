# include <iostream>
using namespace std;

/*
全局区：存储全局变量、静态变量、常量（全局常量）

全局变量和局部变量不在一个区内
静态变量与全局变量在一个区内 
字符串常量离静态变量和全局变量很近

局部常量跟局部变量在一个区内（不在全局区内）

全局区内：全局变量、静态变量、字符串常量、全局常量
*/

// 函数体外部 为全局变量
int g_a = 10;
int g_b = 10;
// const修饰的全局变量 全局常量
const int c_g_c = 10;
const int c_g_d = 10;
int main()
{

	// 函数体内部变量称为局部变量
	int a = 10;
	int b = 10;
	cout << "a的内存地址为：" << (int)&a << endl;
	cout << "b的内存地址为：" << (int)&b << endl;

	cout << "全局变量g_a的内存地址为：" << (int)&g_a << endl;
	cout << "全局变量g_b的内存地址为：" << (int)&g_b << endl;

	// 静态变量
	// 在普通变量前面加static 属于静态变量
	static int s_a = 10;
	static int s_b = 10;
	cout << "静态变量s_a的内存地址为：" << (int)&s_a << endl;
	cout << "静态变量s_b的内存地址为：" << (int)&s_b << endl;

	// 常量
	// 字符串常量
	cout << "字符串常量的地址为：" << (int)&"hello world" << endl;
	// const修饰的变量
	// const修饰的全局变量 const修饰的局部变量

	cout << "全局常量 c_g_c的地址为：" << (int)&c_g_c<< endl;
	cout << "全局常量 c_g_d的地址为：" << (int)&c_g_d << endl;

	// const修饰的局部变量
	const int c_l_a = 10;
	const int c_l_b = 10;
	cout << "局部常量 c_l_a的地址为：" << (int)&c_l_a << endl;
	cout << "局部常量 c_l_b的地址为：" << (int)&c_l_b << endl;
	system("pause");

	return 0;
}
