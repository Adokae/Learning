# include <iostream>
using namespace std;
/*
STL：数据结构与算法的标准
STL广义上可分为：容器container 算法algorithm 迭代器inerator
容器和算法之间通过迭代器进行无缝链接

STL大体上分为：容器、算法、迭代器、仿函数、适配器(配接器)、空间配置器
容器：各种数据结构，如vector list deque set map等，用来存放数据
算法：各种常用算法，如sort find copy for_each等
迭代器：扮演容器与算法之间的粘合剂
仿函数：行为类似函数，可作为算法的某种策略
适配器(配接器)：一般用来修饰容器或者仿函数或迭代器接口的东西
空间配置器：负责空间的配置与管理

容器：实现最广泛的数据结构，如数组、链表、树、栈、队列、集合、映射表等
容器分为序列式容器和关联式容器：
	序列式容器：强调值的排序，序列式容器中的每个元素均有固定的位置
	关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系

算法：
	分为质变算法和非质变算法
	质变算法：运算过程中回更改区间内的元素的内容，例如拷贝、替换、删除等
	非质变算法：运算过程中中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值

迭代器：
提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式
每个容器都有自己专属的迭代器
迭代器可分为以下几种：
输入迭代器 对数据的只读访问 只读 支持++ == ！=
输出迭代器 对数据的只写访问 只写 支持++
前向迭代器 读写操作 并能向前推进迭代器 读写 支持 ++ == ！=
双向迭代器 读写操作 并能向前和向后操作 读写 支持 ++ --
随机访问迭代器 读写操作 可以以跳跃的方式访问任意数据 功能最强的迭代器 读写 
支持++ -- [n] -n < <= > >=

*/
int main()
{

	system("pause");

	return 0;
}
