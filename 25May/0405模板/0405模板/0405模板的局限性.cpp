# include <iostream>
using namespace std;

/*
模板的局限性：
模板不是万能的，有些特定的数据类型，需要使用具体化的方式做特殊实现
学习模板是为了在STL中能够使用系统提供的模板
*/
class Person
{
public:
	Person(string name, int age) {
		this->m_Name = name;
		this->m_Age = age;
	}
	// 姓名
	string m_Name;
	// 年龄
	int m_Age;
};

// 使用模板实现判断两个函数是否相等
template<typename T>
bool myCompare(T& a, T& b)
{
	if (a == b) {
		return true;
	}
	else {
		return false;
	}
}
// 利用具体化的Person版本实现代码，具体化优先调用
// template<>表示告诉编译器这不是一个通用的模板，而是特定类型的模板
template<> bool myCompare(Person& p1, Person& p2) 
{
	if (p1.m_Name == p2.m_Name && p1.m_Age == p2.m_Age) {
		return true;
	}
	else {
		return false;
	}
}

void test1()
{
	int a = 10;
	int b = 20;
	bool ret = myCompare(a, b);
	if (ret) {
		cout << "a == b" << endl;
	}
	else {
		cout << "a != b" << endl;
	}
}

void test2()
{
	Person p1("Tom", 10);
	Person p2("Tom", 10);
	bool ret = myCompare(p1, p2);// 实际执行的时候报错 它无法比较Person类型的数值
	if (ret) {
		cout << "p1 == p2" << endl;
	}
	else {
		cout << "p2 != p2" << endl;
	}
}

int main()
{
	//test1();
	test2();
	system("pause");

	return 0;
}
