#函数
'''
函数-执行特定任务和完成特定功能的一段代码
优点：复用代码、隐藏实现细节、提高可维护性、提高可读性、便于调试
函数创建：
def 函数名([输入参数])：
    函数体
    [return xxx]

'''
'''
#函数创建
def calc(a,b):  #a,b为形式参数，简称形参，出现在函数的定义处
    c = a+b
    return c
    
result = calc(10,20)  #会先跳到定义函数的函数体内，执行函数体，在跳回到函数调用处，继续执行下一步
print(result)         #10，20为实参，实际参数的值，出现在函数的调用处

#参数传递
#(1)位置实参，根据形参所对应的位置进行实参传递，如上面10传给了a,20传给了b
#(2)关键字实参，根据形参名称进行实参传递,如下所示

res = calc(b=10,a=20)
print(res)
'''

'''
参数传递内存分析：

'''

'''
def fun(arg1,arg2):
    print("arg1:",arg1) #arg1: 11
    print("arg2:",arg2) #arg2: [11, 12, 13]
    arg1 = 100
    arg2.append(100)
    print("arg1:", arg1) #arg1: 100
    print("arg2:", arg2) #arg2: [11, 12, 13, 100]
    #return

n1 = 11
n2 = [11,12,13]
print("n1:",n1) #n1:11
print("n2:",n2) #n2:[11,12,13]
fun(n1,n2)  #位置传参，arg1、arg2是函数定义处的形参，而n1、n2是函数调用处的实参，实参名称和形参名称可以不一致

print("n1:",n1) #n1: 11
print("n2:",n2) #n2: [11,12,13,100]
#函数调用过程中，进行参数的传递
#若为不可变对象，在函数体内的修改不会影响实参的值，例如函数体内arg1的修改不会影响n1的值
#若为可变对象，在函数体内的修改会影响实参的值，例如函数体内arg2的修改影响了最后n2的值
'''

#函数返回值
'''
def fun(num):
    odd = [] #存奇数
    even = [] #存偶数
    for i in num:
        if i%2:
            odd.append(i)
        else:
            even.append(i)
    return odd,even
list = [10,29,34,23,44,53,55]
print(fun(list))
'''

'''
函数的返回值：
(1)若函数没有返回值[函数执行完毕后，不需要给调用处提供数据]，return 可以不写
(2）若函数的返回值若是1个，则直接返回原值
(3)若函数的返回值有多个，则返回元组
是否需要返回值，视情况而定
'''

'''
#(1)情况
def fun1():
    print("hello")
    #return #没有返回值，则可不写return

#(2)情况
def fun2():
    return "hello"
a = fun2() #有返回值，需要存储
print(a)

#(3)情况
def fun3():
    return "hello","world"
print(fun3()) #('hello', 'world')
'''

#函数的参数定义

'''
#函数定义默认值参数，函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传递实参
def fun(a,b=10):
    print(a,b)

fun(100) #只传一个参数，默认传给a,b默认为10 100 10

fun(2,40) #传两个参数，a、b的值变为2，40 2 40
'''

'''
#个数可变的位置参数
#定义函数时，无法事先确定传递的位置实参的个数时，使用可变的位置参数
#使用*定义个数可变的位置形参，结果为一个元组
def fun(*arg):
    print(arg)

fun(10)
fun(10,20)
fun(10,20,30)
fun("hello","world")

#个数可变的关键字形参
#定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参
#使用**定义个数可变的关键字形参，结果为一个字典
def fun1(**args):
    print(args)

fun1(a=10)
fun1(a=10,b=20)
fun1(a=10,b=20,c=30)
'''

'''def fun2(*a,*b):
    pass
程序报错，可变位置参数只能有一个
    '''

'''def fun3(**a,**b):
    pass
程序报错，个数可变的关键字参数只能有一个
'''
def fun4(*a,**b):
    pass

'''def fun5(**a,*b):
    pass
    程序报错
    '''
#在函数定义过程中，既有个数可变的位置参数，又有个数可变的关键字形参，要求位置形参放在关键字形参之前


'''
def fun(a,b,c): #a、b、c为形参
    print("a=",a)
    print("b=",b)
    print("c=",c)

fun(10,20,30) #参数传递，位置传参

lst = [11,12,13]
fun(*lst) #参数传递时，将列表每个元素都转换为位置实参传入

fun(a=100,b=111,c=120) #关键字参数
dic = {"a":130,"b":140,"c":150}
fun(**dic) #将字典中的键值对转换为关键字实参传入
'''

'''
def fun(a,b=10): #此处对b进行了赋值，故b为默认值形参
    print("a=",a)
    print("b=",b)

def fun1(*arg1): #个数可变的位置形参
    print(arg1)

def fun2(**arg2): #个数可变的关键字形参
    print(arg2)

fun1(10,20,30,40)
fun2(a=10,b=20,c=30,d=40)
'''

def fund(a,b,*,c,d):  #加*后的参数，在函数调用时只能使用关键字实参传递
    print("a=",a)
    print("b=",b)
    print("c=",c)
    print("d=",d)

#调用函数
#fund(10,20,30,40) #位置实参传递
fund(a=10,b=20,c=30,d=40) #关键字实参传递
fund(10,20,c=30,d=40) #前两个采用的是位置实参传递，后两个采用关键字实参传递
#要求c、d只能采用关键字实参传递，则在b、c之间加*

#函数定义时形参的顺序问题
def fun(a,b,*,c,d,**arg):
    pass

def fun1(*arg,**arg1):
    pass

def fun2(a,b=10,*arg,**arg2):
    pass
